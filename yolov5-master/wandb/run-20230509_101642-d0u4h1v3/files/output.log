                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Focus                     [3, 32, 3]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  1    156928  models.common.C3                        [128, 128, 3]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  1    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1    656896  models.common.SPP                       [512, 512, [5, 9, 13]]
  9                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     40455  models.yolo.Detect                      [10, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
E:\python3.7.6\lib\site-packages\torch\functional.py:568: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  C:\actions-runner\_work\pytorch\pytorch\builder\windows\pytorch\aten\src\ATen\native\TensorShape.cpp:2228.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Model Summary: 283 layers, 7087815 parameters, 7087815 gradients, 16.6 GFLOPS
Transferred 308/362 items from yolov5s.pt
Scaled weight_decay = 0.0005
Optimizer groups: 62 .bias, 62 conv.weight, 59 other
[34m[1mtrain: [39m[22mScanning '..\mycoco\labels\train.cache' images and labels... 36000 found, 0 missing, 0 empty, 2 corrupted: 100%|██████████| 36000/36000 [00:00<?, ?it/s]
Plotting labels...
[34m[1mval: [39m[22mScanning '..\mycoco\labels\val.cache' images and labels... 4000 found, 0 missing, 0 empty, 0 corrupted: 100%|██████████| 4000/4000 [00:00<?, ?it/s]
[34m[1mautoanchor: [39m[22mAnalyzing anchors... anchors/target = 4.96, Best Possible Recall (BPR) = 1.0000
Images sizes do not match. This will causes images to be display incorrectly in the UI.
Image sizes 640 train, 640 test
Using 0 dataloader workers
Logging results to runs\train\exp16
Starting training for 300 epochs...
     Epoch   gpu_mem       box       obj       cls     total    labels  img_size
































     0/299     2.99G    0.1233   0.03344   0.06779    0.2245        61       640:   1%|▏         | 32/2250 [02:08<2:28:33,  4.02s/it]
Traceback (most recent call last):
  File "E:/pycharm/govT_project/tianchi_mchar-main/yolov5-master/train.py", line 545, in <module>
    train(hyp, opt, device, tb_writer)
  File "E:/pycharm/govT_project/tianchi_mchar-main/yolov5-master/train.py", line 317, in train
    scaler.step(optimizer)  # optimizer.step
  File "E:\python3.7.6\lib\site-packages\torch\cuda\amp\grad_scaler.py", line 338, in step
    retval = self._maybe_opt_step(optimizer, optimizer_state, *args, **kwargs)
  File "E:\python3.7.6\lib\site-packages\torch\cuda\amp\grad_scaler.py", line 284, in _maybe_opt_step
    if not sum(v.item() for v in optimizer_state["found_inf_per_device"].values()):
  File "E:\python3.7.6\lib\site-packages\torch\cuda\amp\grad_scaler.py", line 284, in <genexpr>
    if not sum(v.item() for v in optimizer_state["found_inf_per_device"].values()):
KeyboardInterrupt